import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import plotly.graph_objects as go
from PIL import Image

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Modelo de Leptospirosis con Vacunaci√≥n",
    page_icon="ü¶†",
    layout="wide"
)

# T√≠tulo principal
st.title("Simulaci√≥n de Vacunaci√≥n para Leptospirosis")
st.markdown("---")

# Men√∫ lateral
menu = st.sidebar.selectbox(
    "Men√∫ Principal",
    ["üìö Descripci√≥n del Modelo", "‚öôÔ∏è Simulaci√≥n", "üìä An√°lisis Costo-Beneficio", "üìà Resultados Hist√≥ricos"]
)

# Secci√≥n: Descripci√≥n del Modelo
if menu == "üìö Descripci√≥n del Modelo":
    st.header("Modelo SEIRV para Leptospirosis")
    col1, col2 = st.columns([3, 2])
    
    with col1:
        st.markdown("""
        ### Ecuaciones del Modelo
        - **Suscetibles (S):**
            \n$\frac{dS}{dt} = \Lambda + \gamma R + \gamma_v V - (\lambda + \mu + \nu)S$
            
        - **Vacunados (V):**
            \n$\frac{dV}{dt} = \nu S - (\gamma_v + \mu)V$
            
        - **Expuestos (E):**
            \n$\frac{dE}{dt} = \lambda S + (1-\epsilon)\lambda V - (\theta + \mu)E$
            
        - **Infectados (I):**
            \n$\frac{dI}{dt} = \theta E - (\alpha + \delta + \mu)I$
            
        - **Recuperados (R):**
            \n$\frac{dR}{dt} = \delta I - (\gamma + \mu)R$
        """)
    
    with col2:
        st.markdown("### Diagrama de Flujo del Modelo")
        img = Image.open("seirv_diagram.png")  # Aseg√∫rate de tener una imagen
        st.image(img, use_column_width=True)
    
    st.markdown("---")
    st.markdown("### Par√°metros Clave")
    st.table({
        "Par√°metro": ["ŒΩ", "Œµ", "Œ≥_v", "Œ≤1", "Œ≤2"],
        "Descripci√≥n": ["Tasa de vacunaci√≥n", "Efectividad vacuna", 
                       "Duraci√≥n inmunidad", "Transmisi√≥n roedores", 
                       "Transmisi√≥n ambiente"],
        "Unidades": ["personas/d√≠a", "%", "d√≠as‚Åª¬π", "d√≠a‚Åª¬π", "d√≠a‚Åª¬π"]
    })

# Secci√≥n: Simulaci√≥n
elif menu == "‚öôÔ∏è Simulaci√≥n":
    st.header("Configuraci√≥n de la Simulaci√≥n")
    
    # Dividir en columnas
    col_params, col_vac = st.columns(2)
    
    with col_params:
        st.subheader("Par√°metros de la Enfermedad")
        beta1 = st.slider("Transmisi√≥n roedores (Œ≤1)", 0.0, 0.01, 0.00033)
        beta2 = st.slider("Transmisi√≥n ambiente (Œ≤2)", 0.0, 0.1, 0.0815)
        theta = st.slider("Tasa de progresi√≥n (Œ∏)", 0.0, 0.2, 0.092)
        delta = st.slider("Tasa de recuperaci√≥n (Œ¥)", 0.0, 0.1, 0.072)
    
    with col_vac:
        st.subheader("Par√°metros de Vacunaci√≥n")
        nu = st.slider("Tasa de vacunaci√≥n (ŒΩ)", 0.0, 0.1, 0.01)
        epsilon = st.slider("Efectividad vacuna (Œµ)", 0.0, 1.0, 0.8)
        gamma_v = st.slider("Duraci√≥n inmunidad (Œ≥_v)", 0.0, 0.01, 1/365)
    
    # Sistema de ecuaciones diferenciales (igual que antes)
    def run_simulation(params):
        # Implementar modelo aqu√≠
        return 6
    
    if st.button("Ejecutar Simulaci√≥n"):
        with st.spinner("Calculando..."):
            # Ejecutar simulaci√≥n
            results = run_simulation(locals())
            
            # Mostrar gr√°ficos
            st.subheader("Resultados de la Simulaci√≥n")
            fig = go.Figure()
            fig.add_trace(go.Scatter(x=results['t'], y=results['I'], name='Infectados'))
            fig.add_trace(go.Scatter(x=results['t'], y=results['V'], name='Vacunados'))
            fig.update_layout(title="Din√°mica Temporal de la Poblaci√≥n")
            st.plotly_chart(fig, use_container_width=True)

# Secci√≥n: An√°lisis Costo-Beneficio
elif menu == "üìä An√°lisis Costo-Beneficio":
    st.header("An√°lisis de Costo-Beneficio")
    
    col_cost, col_health = st.columns(2)
    
    with col_cost:
        st.subheader("Costos de Vacunaci√≥n")
        cost_dose = st.number_input("Costo por dosis (USD)", 0, 100, 15)
        campaign_cost = st.number_input("Costo de campa√±a (USD)", 0, 100000, 5000)
    
    with col_health:
        st.subheader("Costos de Salud")
        cost_case = st.number_input("Costo por caso tratado (USD)", 0, 10000, 3000)
        productivity_loss = st.number_input("P√©rdida productividad/d√≠a (USD)", 0, 500, 150)
    
    if st.button("Calcular Relaci√≥n Costo-Beneficio"):
        # C√°lculos y visualizaci√≥n
        st.metric(label="Relaci√≥n Costo-Beneficio", value="3.2:1")
        
        fig = go.Figure()
        fig.add_bar(x=['Costo Total', 'Beneficio'], y=[120000, 384000])
        st.plotly_chart(fig, use_container_width=True)

# Secci√≥n: Resultados Hist√≥ricos
elif menu == "üìà Resultados Hist√≥ricos":
    st.header("Comparaci√≥n Hist√≥rica de Escenarios")
    
    scenarios = st.multiselect("Seleccionar escenarios", 
                              ["Sin Vacunaci√≥n", "Vacunaci√≥n Baja", 
                               "Vacunaci√≥n Media", "Vacunaci√≥n Alta"])
    
    if scenarios:
        fig = go.Figure()
        for scenario in scenarios:
            # Datos simulados
            fig.add_trace(go.Scatter(x=np.arange(100), y=np.random.randn(100), name=scenario))
        
        fig.update_layout(title="Comparaci√≥n de Escenarios")
        st.plotly_chart(fig, use_container_width=True)

# Estilos CSS personalizados
st.markdown("""
<style>
    .stMetric {
        background-color: #f0f2f6;
        border-radius: 10px;
        padding: 15px;
        margin: 10px 0;
    }
    .st-bb {
        border-bottom: 2px solid #e1e4e8;
    }
    .css-18e3th9 {
        padding: 2rem 1rem;
    }
</style>
""", unsafe_allow_html=True)